#include <stdio.h>
#include <stdlib.h>
#include "esp_system.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#include "dl_tool.hpp"
#include "model_define.hpp"



int input_height = 80;
int input_width = 3;
int input_channel = 1;
int input_exponent = -13;

float example_element[240] = { 0.65932219,
         0.64859022,
         0.65932219,

        0.64859022,
         0.64859022,
         0.63517527,

        0.63517527,
         0.68078611,
         0.64859022,

        0.65932219,
         0.63517527,
         0.67005415,

        0.65932219,
         0.63517527,
         0.64859022,

        0.65932219,
         0.64859022,
         0.63517527,

        0.68883509,
         0.63517527,
         0.6244433 ,

        0.64859022,
         0.65932219,
         0.6244433 ,

        0.64859022,
         0.64859022,
         0.64859022,

        0.64859022,
         0.65932219,
         0.65932219,

        0.6244433 ,
         0.63517527,
         0.65932219,

        0.64859022,
         0.63517527,
         0.65932219,

        0.65932219,
         0.65932219,
         0.63517527,

        0.67005415,
         0.65932219,
         0.67005415,

        0.64859022,
         0.67005415,
         0.65932219,

        0.67005415,
         0.67005415,
         0.65932219,

        0.65932219,
         0.65932219,
         0.65932219,

        0.65932219,
         0.65932219,
         0.5949304 ,

        0.65932219,
         0.68078611,
         0.72103098,

        0.64859022,
         0.57346647,
         0.64859022,

        0.69956705,
         0.73176294,
         0.67005415,

        0.61907732,
         0.64859022,
         0.67005415,

        0.68078611,
         0.68078611,
         0.67005415,

        0.65932219,
         0.67005415,
         0.64859022,

        0.65932219,
         0.67005415,
         0.65932219,

        0.63517527,
         0.67005415,
         0.67005415,

        0.64859022,
         0.65932219,
         0.14881998,

        0.15272186,
         0.14881998,
         0.15272186,

        0.14881998,
         0.15272186,
         0.15272186,

        0.14881998,
         0.15272186,
         0.14881998,

        0.16052561,
         0.15272186,
         0.15272186,

        0.14881998,
         0.14881998,
         0.16052561,

        0.15272186,
         0.16052561,
         0.13906529,

        0.15272186,
         0.16052561,
         0.15272186,

        0.14881998,
         0.16832936,
         0.14881998,

        0.16052561,
         0.15272186,
         0.16052561,

        0.13906529,
         0.13906529,
         0.1858878 ,

        0.15272186,
         0.14881998,
         0.14881998,

        0.14881998,
         0.15272186,
         0.14881998,

        0.16052561,
         0.16052561,
         0.13906529,

        0.16052561,
         0.15272186,
         0.15272186,

        0.14881998,
         0.16052561,
         0.14881998,

        0.15272186,
         0.14881998,
         0.15272186,

        0.15272186,
         0.14881998,
         0.15272186,

        0.15272186,
         0.17808405,
         0.12345779,

        0.16052561,
         0.10980123,
         0.16832936,

        0.19369155,
         0.15272186,
         0.15272186,

        0.12345779,
         0.13906529,
         0.17808405,

        0.15272186,
         0.13906529,
         0.15272186,

        0.14881998,
         0.15272186,
         0.15272186,

        0.15272186,
         0.15272186,
         0.13906529,

        0.13906529,
         0.16832936,
         0.15272186,

        0.14881998,
         0.14881998,
         0.16052561,

        0.14881998,
        -0.17213028,
        -0.17213028,

       -0.15998593,
        -0.17213028,
        -0.13974529,

       -0.15188968,
        -0.15188968,
        -0.18427464,

       -0.15188968,
        -0.18427464,
        -0.15998593,

       -0.15998593,
        -0.18427464,
        -0.15998593,

       -0.15998593,
        -0.17213028,
        -0.17213028,

       -0.15998593,
        -0.17213028,
        -0.15188968,

       -0.15998593,
        -0.17213028,
        -0.12760093,

       -0.17213028,
        -0.15188968,
        -0.17213028,

       -0.15188968,
        -0.17213028,
        -0.17213028,

       -0.13974529,
        -0.15998593,
        -0.17213028,

       -0.15998593,
        -0.15998593,
        -0.15188968,

       -0.17213028,
        -0.15998593,
        -0.15998593,

       -0.17213028,
        -0.17213028,
        -0.15188968,

       -0.15188968,
        -0.18427464,
        -0.15998593,

       -0.18427464,
        -0.17213028,
        -0.17213028,

       -0.17213028,
        -0.17213028,
        -0.15998593,

       -0.18427464,
        -0.15998593,
        -0.19641903,

       -0.17213028,
        -0.21665966,
        -0.17213028,

       -0.09521596,
        -0.22880402,
        -0.17213028,

       -0.21665966,
        -0.17213028,
        -0.11545657,

       -0.17213028,
        -0.19641903,
        -0.18427464,

       -0.18427464,
        -0.15998593,
        -0.18427464,

       -0.17213028,
        -0.17213028,
        -0.17213028,

       -0.17213028,
        -0.19641903,
        -0.17213028,

       -0.17213028,
        -0.15998593,
        -0.15998593,

       -0.15998593,
        -0.15998593,
        -0.18427464
        };


//int16_t normalize[240]={};

extern "C" void app_main(void)
{
  // int32_t max=example_element[0];

  // for (int i = 0; i < 80*3; i++) {
  //   if (max < example_element[i]) {
  //     max= example_element[i];
  //   }}
  // for (int i = 0; i < 80*3; i++) {
  //     normalize[i] = (int16_t) * example_element[i]/max;
  //   }

int16_t *model_input = (int16_t *)dl::tool::malloc_aligned_prefer(input_height*input_width*input_channel, sizeof(int16_t *));
    for(int i=0 ;i<input_height*input_width*input_channel; i++){
        float normalized_input = example_element[i] / 1.0; //normalization
        model_input[i] = (int16_t)DL_CLIP(normalized_input * (1 << -input_exponent), -32768, 32767);
    } 

Tensor<int16_t> input;
                input.set_element((int16_t *) model_input).set_exponent(input_exponent).set_shape({input_height,input_width,input_channel}).set_auto_free(false);
                ACTIVITY model;
                dl::tool::Latency latency;
                latency.start();
                model.forward(input);
                latency.end();
                latency.print("\nSIGN", "forward");
                float *score = model.l6.get_output().get_element_ptr();
                float max_score = score[0];
                int max_index = 0;
                for (size_t i = 0; i < 6; i++)
                {
                    printf("%f, ", score[i]*100);
                    if (score[i] > max_score)
                    {
                        max_score = score[i];
                        max_index = i;
                    }
                }
                printf("\n");

                switch (max_index)
                {
                    case 0:
                    printf("Downstairs");
                    break;
                    case 1:
                    printf("Jogging");
                    break;
                    case 2:
                    printf("Sitting");
                    break;
                    case 3:
                    printf("Standing");
                    break;
                    case 4:
                    printf("Upstairs");
                    break;
                    case 5:
                    printf("Walking");
                    break;
                    default:
                    printf("No result");

                }
                printf("\n");

}